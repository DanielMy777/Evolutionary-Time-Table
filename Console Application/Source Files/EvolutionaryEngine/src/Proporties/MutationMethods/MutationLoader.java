package Proporties.MutationMethods;

import Management.EEException;
import Proporties.Mutation;
import generated.ETTMutation;

//This utility class can load a Mutation method from a ETTMutation object generated by unmarshalling.

public class MutationLoader {
    public static Mutation LoadMutationFromXML(ETTMutation mutation) throws EEException
    {
        Mutation res = null;
        double prob = mutation.getProbability();
        if(prob < 0 || prob > 1)
            throw new EEException("XML error - probability must be between 0 - 1");
        String[] confArr = new String[3];
        String conf = mutation.getConfiguration();
        if(conf == null)
            conf = "";
        else
            confArr = conf.split(",");
        switch (mutation.getName())
        {
            case "Flipping":
                String component;
                int maxTupples;
                if(confArr[0].split("=")[0].equals("Component"))
                {
                    component = confArr[0].split("=")[1];
                    maxTupples = Integer.parseInt(confArr[1].split("=")[1]);
                }
                else
                {
                    component = confArr[1].split("=")[1];
                    maxTupples = Integer.parseInt(confArr[0].split("=")[1]);
                }
                try {
                    Flipping.Component c = Flipping.Component.valueOf(component);
                    res = new Flipping(prob, conf, maxTupples, c);
                }
                catch (IllegalArgumentException e)
                {
                    throw new EEException("XML error - unrecognized component - " + component);
                }

                break;
            case "Sizer":
                int Tupples = Integer.parseInt(confArr[0].split("=")[1]);
                res = new Sizer(prob, conf, Tupples);
                break;
            default:
                throw new EEException("XML error - Mutation type " + mutation.getName() + " not supported");
        }
        return res;
    }
}
